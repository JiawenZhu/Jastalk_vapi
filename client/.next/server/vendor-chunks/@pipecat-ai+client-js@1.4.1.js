"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pipecat-ai+client-js@1.4.1";
exports.ids = ["vendor-chunks/@pipecat-ai+client-js@1.4.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@pipecat-ai+client-js@1.4.1/node_modules/@pipecat-ai/client-js/dist/index.module.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@pipecat-ai+client-js@1.4.1/node_modules/@pipecat-ai/client-js/dist/index.module.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BotAlreadyStartedError: () => (/* binding */ $db6391dc7d757577$export$cc240eab14fa4f50),\n/* harmony export */   BotNotReadyError: () => (/* binding */ $db6391dc7d757577$export$885fb96b850e8fbb),\n/* harmony export */   ConnectionTimeoutError: () => (/* binding */ $db6391dc7d757577$export$c67992fa684a81a6),\n/* harmony export */   DeviceError: () => (/* binding */ $db6391dc7d757577$export$64c9f614187c1e59),\n/* harmony export */   InvalidTransportParamsError: () => (/* binding */ $db6391dc7d757577$export$b6ce555ea7f95fba),\n/* harmony export */   LogLevel: () => (/* binding */ $e0900798b6cc045b$export$243e62d78d3b544d),\n/* harmony export */   MessageDispatcher: () => (/* binding */ $769bb602511974a1$export$e9a960646cc432aa),\n/* harmony export */   PipecatClient: () => (/* binding */ $364c127d152b1085$export$8f7f86a77535f7a3),\n/* harmony export */   RTVIError: () => (/* binding */ $db6391dc7d757577$export$59b4786f333aac02),\n/* harmony export */   RTVIEvent: () => (/* binding */ $c1b4da4af54f4fa1$export$6b4624d233c61fcb),\n/* harmony export */   RTVIMessage: () => (/* binding */ $c0d10c4690969999$export$69aa9ab0334b212),\n/* harmony export */   RTVIMessageType: () => (/* binding */ $c0d10c4690969999$export$38b3db05cbf0e240),\n/* harmony export */   RTVI_MESSAGE_LABEL: () => (/* binding */ $c0d10c4690969999$export$882b13c7fda338f5),\n/* harmony export */   RTVI_PROTOCOL_VERSION: () => (/* binding */ $c0d10c4690969999$export$7bdaf0e0d661a8f5),\n/* harmony export */   StartBotError: () => (/* binding */ $db6391dc7d757577$export$e7544ab812238a61),\n/* harmony export */   Transport: () => (/* binding */ $7ef5cee66c377f4d$export$86495b081fef8e52),\n/* harmony export */   TransportStartError: () => (/* binding */ $db6391dc7d757577$export$e0624a511a2c4e9),\n/* harmony export */   TransportStateEnum: () => (/* binding */ $6396333126da0e76$export$8f2038d3679a1d9b),\n/* harmony export */   TransportWrapper: () => (/* binding */ $7ef5cee66c377f4d$export$82b6ede160a64a3c),\n/* harmony export */   UnsupportedFeatureError: () => (/* binding */ $db6391dc7d757577$export$bd0820eb8444fcd9),\n/* harmony export */   isAPIRequest: () => (/* binding */ $d0e914667cc5346b$export$2dd7ca293b2783),\n/* harmony export */   learnAboutClient: () => (/* binding */ $dfd757760e36925b$export$7eb7b0a641098f31),\n/* harmony export */   logger: () => (/* binding */ $e0900798b6cc045b$export$af88d00dbe7f521),\n/* harmony export */   makeRequest: () => (/* binding */ $d0e914667cc5346b$export$699251e5611cc6db),\n/* harmony export */   setAboutClient: () => (/* binding */ $c0d10c4690969999$export$e4036f9b8ddb7379)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/.pnpm/bowser@2.12.1/node_modules/bowser/src/bowser.js\");\n\n\n\n\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $05fa7b586184a19c$exports = {};\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $364c127d152b1085$exports = {};\n\n$parcel$export($364c127d152b1085$exports, \"PipecatClient\", () => $364c127d152b1085$export$8f7f86a77535f7a3);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nvar $e3bad9cc25e327f7$exports = {};\n$e3bad9cc25e327f7$exports = JSON.parse(\"{\\\"name\\\":\\\"@pipecat-ai/client-js\\\",\\\"version\\\":\\\"1.4.0\\\",\\\"license\\\":\\\"BSD-2-Clause\\\",\\\"main\\\":\\\"dist/index.js\\\",\\\"module\\\":\\\"dist/index.module.js\\\",\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"source\\\":\\\"index.ts\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/pipecat-ai/pipecat-client-web.git\\\"},\\\"files\\\":[\\\"dist\\\",\\\"package.json\\\",\\\"README.md\\\"],\\\"scripts\\\":{\\\"build\\\":\\\"jest --silent --passWithNoTests && parcel build --no-cache\\\",\\\"dev\\\":\\\"parcel watch\\\",\\\"lint\\\":\\\"eslint . --report-unused-disable-directives --max-warnings 0\\\",\\\"test\\\":\\\"jest\\\"},\\\"jest\\\":{\\\"preset\\\":\\\"ts-jest\\\",\\\"testEnvironment\\\":\\\"jsdom\\\"},\\\"devDependencies\\\":{\\\"@jest/globals\\\":\\\"^29.7.0\\\",\\\"@types/clone-deep\\\":\\\"^4.0.4\\\",\\\"@types/jest\\\":\\\"^29.5.12\\\",\\\"@types/uuid\\\":\\\"^10.0.0\\\",\\\"eslint\\\":\\\"^9.11.1\\\",\\\"eslint-config-prettier\\\":\\\"^9.1.0\\\",\\\"eslint-plugin-simple-import-sort\\\":\\\"^12.1.1\\\",\\\"jest\\\":\\\"^29.7.0\\\",\\\"jest-environment-jsdom\\\":\\\"^30.0.2\\\",\\\"ts-jest\\\":\\\"^29.2.5\\\"},\\\"dependencies\\\":{\\\"@types/events\\\":\\\"^3.0.3\\\",\\\"bowser\\\":\\\"^2.11.0\\\",\\\"clone-deep\\\":\\\"^4.0.1\\\",\\\"events\\\":\\\"^3.3.0\\\",\\\"typed-emitter\\\":\\\"^2.1.0\\\",\\\"uuid\\\":\\\"^10.0.0\\\"}}\");\n\n\nvar $fc3f408bb0b1f921$exports = {};\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $6396333126da0e76$exports = {};\n\n$parcel$export($6396333126da0e76$exports, \"TransportStateEnum\", () => $6396333126da0e76$export$8f2038d3679a1d9b);\nvar $6396333126da0e76$export$8f2038d3679a1d9b;\n(function(TransportStateEnum) {\n    TransportStateEnum[\"DISCONNECTED\"] = \"disconnected\";\n    TransportStateEnum[\"INITIALIZING\"] = \"initializing\";\n    TransportStateEnum[\"INITIALIZED\"] = \"initialized\";\n    TransportStateEnum[\"AUTHENTICATING\"] = \"authenticating\";\n    TransportStateEnum[\"AUTHENTICATED\"] = \"authenticated\";\n    TransportStateEnum[\"CONNECTING\"] = \"connecting\";\n    TransportStateEnum[\"CONNECTED\"] = \"connected\";\n    TransportStateEnum[\"READY\"] = \"ready\";\n    TransportStateEnum[\"DISCONNECTING\"] = \"disconnecting\";\n    TransportStateEnum[\"ERROR\"] = \"error\";\n})($6396333126da0e76$export$8f2038d3679a1d9b || ($6396333126da0e76$export$8f2038d3679a1d9b = {}));\n\n\nvar $db6391dc7d757577$exports = {};\n\n$parcel$export($db6391dc7d757577$exports, \"RTVIError\", () => $db6391dc7d757577$export$59b4786f333aac02);\n$parcel$export($db6391dc7d757577$exports, \"ConnectionTimeoutError\", () => $db6391dc7d757577$export$c67992fa684a81a6);\n$parcel$export($db6391dc7d757577$exports, \"StartBotError\", () => $db6391dc7d757577$export$e7544ab812238a61);\n$parcel$export($db6391dc7d757577$exports, \"TransportStartError\", () => $db6391dc7d757577$export$e0624a511a2c4e9);\n$parcel$export($db6391dc7d757577$exports, \"InvalidTransportParamsError\", () => $db6391dc7d757577$export$b6ce555ea7f95fba);\n$parcel$export($db6391dc7d757577$exports, \"BotNotReadyError\", () => $db6391dc7d757577$export$885fb96b850e8fbb);\n$parcel$export($db6391dc7d757577$exports, \"BotAlreadyStartedError\", () => $db6391dc7d757577$export$cc240eab14fa4f50);\n$parcel$export($db6391dc7d757577$exports, \"UnsupportedFeatureError\", () => $db6391dc7d757577$export$bd0820eb8444fcd9);\n$parcel$export($db6391dc7d757577$exports, \"DeviceError\", () => $db6391dc7d757577$export$64c9f614187c1e59);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ class $db6391dc7d757577$export$59b4786f333aac02 extends Error {\n    constructor(message, status){\n        super(message);\n        this.status = status;\n    }\n}\nclass $db6391dc7d757577$export$c67992fa684a81a6 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Bot did not enter ready state within the specified timeout period.\");\n    }\n}\nclass $db6391dc7d757577$export$e7544ab812238a61 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message, status){\n        super(message ?? `Failed to connect / invalid auth bundle from base url`, status ?? 500);\n        this.error = \"invalid-request-error\";\n    }\n}\nclass $db6391dc7d757577$export$e0624a511a2c4e9 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Unable to connect to transport\");\n    }\n}\nclass $db6391dc7d757577$export$b6ce555ea7f95fba extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Invalid transport connection parameters\");\n    }\n}\nclass $db6391dc7d757577$export$885fb96b850e8fbb extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Attempt to call action on transport when not in 'ready' state.\");\n    }\n}\nclass $db6391dc7d757577$export$cc240eab14fa4f50 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Pipecat client has already been started. Please call disconnect() before starting again.\");\n    }\n}\nclass $db6391dc7d757577$export$bd0820eb8444fcd9 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(feature, source, message){\n        let msg = `${feature} not supported${message ? `: ${message}` : \"\"}`;\n        if (source) msg = `${source} does not support ${feature}${message ? `: ${message}` : \"\"}`;\n        super(msg);\n        this.feature = feature;\n    }\n}\nclass $db6391dc7d757577$export$64c9f614187c1e59 extends $db6391dc7d757577$export$59b4786f333aac02 {\n    constructor(devices, type, message, details){\n        super(message ?? `Device error for ${devices.join(\", \")}: ${type}`);\n        this.devices = devices;\n        this.type = type;\n        this.details = details;\n    }\n}\n\n\nvar $c1b4da4af54f4fa1$exports = {};\n\n$parcel$export($c1b4da4af54f4fa1$exports, \"RTVIEvent\", () => $c1b4da4af54f4fa1$export$6b4624d233c61fcb);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $c1b4da4af54f4fa1$export$6b4624d233c61fcb;\n(function(RTVIEvent) {\n    /** local connection state events */ RTVIEvent[\"Connected\"] = \"connected\";\n    RTVIEvent[\"Disconnected\"] = \"disconnected\";\n    RTVIEvent[\"TransportStateChanged\"] = \"transportStateChanged\";\n    /** remote connection state events */ RTVIEvent[\"BotStarted\"] = \"botStarted\";\n    RTVIEvent[\"BotConnected\"] = \"botConnected\";\n    RTVIEvent[\"BotReady\"] = \"botReady\";\n    RTVIEvent[\"BotDisconnected\"] = \"botDisconnected\";\n    RTVIEvent[\"Error\"] = \"error\";\n    /** server messaging */ RTVIEvent[\"ServerMessage\"] = \"serverMessage\";\n    RTVIEvent[\"ServerResponse\"] = \"serverResponse\";\n    RTVIEvent[\"MessageError\"] = \"messageError\";\n    /** service events */ RTVIEvent[\"Metrics\"] = \"metrics\";\n    // vad events\n    RTVIEvent[\"BotStartedSpeaking\"] = \"botStartedSpeaking\";\n    RTVIEvent[\"BotStoppedSpeaking\"] = \"botStoppedSpeaking\";\n    RTVIEvent[\"UserStartedSpeaking\"] = \"userStartedSpeaking\";\n    RTVIEvent[\"UserStoppedSpeaking\"] = \"userStoppedSpeaking\";\n    // stt events\n    RTVIEvent[\"UserTranscript\"] = \"userTranscript\";\n    RTVIEvent[\"BotTranscript\"] = \"botTranscript\";\n    // llm events\n    RTVIEvent[\"BotLlmText\"] = \"botLlmText\";\n    RTVIEvent[\"BotLlmStarted\"] = \"botLlmStarted\";\n    RTVIEvent[\"BotLlmStopped\"] = \"botLlmStopped\";\n    RTVIEvent[\"LLMFunctionCall\"] = \"llmFunctionCall\";\n    RTVIEvent[\"BotLlmSearchResponse\"] = \"botLlmSearchResponse\";\n    // tts events\n    RTVIEvent[\"BotTtsText\"] = \"botTtsText\";\n    RTVIEvent[\"BotTtsStarted\"] = \"botTtsStarted\";\n    RTVIEvent[\"BotTtsStopped\"] = \"botTtsStopped\";\n    /** participant events */ RTVIEvent[\"ParticipantConnected\"] = \"participantConnected\";\n    RTVIEvent[\"ParticipantLeft\"] = \"participantLeft\";\n    /** media events */ RTVIEvent[\"TrackStarted\"] = \"trackStarted\";\n    RTVIEvent[\"TrackStopped\"] = \"trackStopped\";\n    RTVIEvent[\"ScreenTrackStarted\"] = \"screenTrackStarted\";\n    RTVIEvent[\"ScreenTrackStopped\"] = \"screenTrackStopped\";\n    RTVIEvent[\"ScreenShareError\"] = \"screenShareError\";\n    RTVIEvent[\"LocalAudioLevel\"] = \"localAudioLevel\";\n    RTVIEvent[\"RemoteAudioLevel\"] = \"remoteAudioLevel\";\n    /** media device events */ RTVIEvent[\"AvailableCamsUpdated\"] = \"availableCamsUpdated\";\n    RTVIEvent[\"AvailableMicsUpdated\"] = \"availableMicsUpdated\";\n    RTVIEvent[\"AvailableSpeakersUpdated\"] = \"availableSpeakersUpdated\";\n    RTVIEvent[\"CamUpdated\"] = \"camUpdated\";\n    RTVIEvent[\"MicUpdated\"] = \"micUpdated\";\n    RTVIEvent[\"SpeakerUpdated\"] = \"speakerUpdated\";\n    RTVIEvent[\"DeviceError\"] = \"deviceError\";\n})($c1b4da4af54f4fa1$export$6b4624d233c61fcb || ($c1b4da4af54f4fa1$export$6b4624d233c61fcb = {}));\n\n\nvar $c0d10c4690969999$exports = {};\n\n$parcel$export($c0d10c4690969999$exports, \"RTVI_PROTOCOL_VERSION\", () => $c0d10c4690969999$export$7bdaf0e0d661a8f5);\n$parcel$export($c0d10c4690969999$exports, \"RTVI_MESSAGE_LABEL\", () => $c0d10c4690969999$export$882b13c7fda338f5);\n$parcel$export($c0d10c4690969999$exports, \"RTVIMessageType\", () => $c0d10c4690969999$export$38b3db05cbf0e240);\n$parcel$export($c0d10c4690969999$exports, \"setAboutClient\", () => $c0d10c4690969999$export$e4036f9b8ddb7379);\n$parcel$export($c0d10c4690969999$exports, \"RTVIMessage\", () => $c0d10c4690969999$export$69aa9ab0334b212);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\nconst $c0d10c4690969999$export$7bdaf0e0d661a8f5 = \"1.0.0\";\nconst $c0d10c4690969999$export$882b13c7fda338f5 = \"rtvi-ai\";\nvar $c0d10c4690969999$export$38b3db05cbf0e240;\n(function(RTVIMessageType) {\n    /** Outbound Messages */ RTVIMessageType[\"CLIENT_READY\"] = \"client-ready\";\n    RTVIMessageType[\"DISCONNECT_BOT\"] = \"disconnect-bot\";\n    // Client-to-server messages\n    RTVIMessageType[\"CLIENT_MESSAGE\"] = \"client-message\";\n    RTVIMessageType[\"SEND_TEXT\"] = \"send-text\";\n    // DEPRECATED\n    RTVIMessageType[\"APPEND_TO_CONTEXT\"] = \"append-to-context\";\n    /**\n     * Inbound Messages\n     * Messages the server-side client sends to our client-side client regarding\n     * its state or other non-service-specific messaging.\n     */ RTVIMessageType[\"BOT_READY\"] = \"bot-ready\";\n    RTVIMessageType[\"ERROR\"] = \"error\";\n    RTVIMessageType[\"METRICS\"] = \"metrics\";\n    RTVIMessageType[\"SERVER_MESSAGE\"] = \"server-message\";\n    RTVIMessageType[\"SERVER_RESPONSE\"] = \"server-response\";\n    RTVIMessageType[\"ERROR_RESPONSE\"] = \"error-response\";\n    RTVIMessageType[\"APPEND_TO_CONTEXT_RESULT\"] = \"append-to-context-result\";\n    /** Transcription Messages */ RTVIMessageType[\"USER_TRANSCRIPTION\"] = \"user-transcription\";\n    RTVIMessageType[\"BOT_TRANSCRIPTION\"] = \"bot-transcription\";\n    RTVIMessageType[\"USER_STARTED_SPEAKING\"] = \"user-started-speaking\";\n    RTVIMessageType[\"USER_STOPPED_SPEAKING\"] = \"user-stopped-speaking\";\n    RTVIMessageType[\"BOT_STARTED_SPEAKING\"] = \"bot-started-speaking\";\n    RTVIMessageType[\"BOT_STOPPED_SPEAKING\"] = \"bot-stopped-speaking\";\n    /** LLM Messages */ RTVIMessageType[\"USER_LLM_TEXT\"] = \"user-llm-text\";\n    RTVIMessageType[\"BOT_LLM_TEXT\"] = \"bot-llm-text\";\n    RTVIMessageType[\"BOT_LLM_STARTED\"] = \"bot-llm-started\";\n    RTVIMessageType[\"BOT_LLM_STOPPED\"] = \"bot-llm-stopped\";\n    // Function calling\n    RTVIMessageType[\"LLM_FUNCTION_CALL\"] = \"llm-function-call\";\n    RTVIMessageType[\"LLM_FUNCTION_CALL_RESULT\"] = \"llm-function-call-result\";\n    RTVIMessageType[\"BOT_LLM_SEARCH_RESPONSE\"] = \"bot-llm-search-response\";\n    /** TTS Messages */ RTVIMessageType[\"BOT_TTS_TEXT\"] = \"bot-tts-text\";\n    RTVIMessageType[\"BOT_TTS_STARTED\"] = \"bot-tts-started\";\n    RTVIMessageType[\"BOT_TTS_STOPPED\"] = \"bot-tts-stopped\";\n})($c0d10c4690969999$export$38b3db05cbf0e240 || ($c0d10c4690969999$export$38b3db05cbf0e240 = {}));\n// ----- Message Classes\nlet $c0d10c4690969999$var$_aboutClient;\nfunction $c0d10c4690969999$export$e4036f9b8ddb7379(about) {\n    // allow for partial updates to the about data\n    // this allows the client to set the about data at any time\n    // before sending the `client-ready` message and not worry about\n    // overwriting existing data\n    if ($c0d10c4690969999$var$_aboutClient) $c0d10c4690969999$var$_aboutClient = {\n        ...$c0d10c4690969999$var$_aboutClient,\n        ...about\n    };\n    else // if no about data is set, set it to the provided value\n    $c0d10c4690969999$var$_aboutClient = about;\n}\nclass $c0d10c4690969999$export$69aa9ab0334b212 {\n    constructor(type, data, id){\n        this.label = $c0d10c4690969999$export$882b13c7fda338f5;\n        this.type = type;\n        this.data = data;\n        this.id = id || (0, uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().slice(0, 8);\n    }\n    // Outbound message types\n    static clientReady() {\n        return new $c0d10c4690969999$export$69aa9ab0334b212($c0d10c4690969999$export$38b3db05cbf0e240.CLIENT_READY, {\n            version: $c0d10c4690969999$export$7bdaf0e0d661a8f5,\n            about: $c0d10c4690969999$var$_aboutClient || {\n                library: (0, $e3bad9cc25e327f7$exports.name),\n                library_version: (0, $e3bad9cc25e327f7$exports.version)\n            }\n        });\n    }\n    static disconnectBot() {\n        return new $c0d10c4690969999$export$69aa9ab0334b212($c0d10c4690969999$export$38b3db05cbf0e240.DISCONNECT_BOT, {});\n    }\n    static error(message, fatal = false) {\n        return new $c0d10c4690969999$export$69aa9ab0334b212($c0d10c4690969999$export$38b3db05cbf0e240.ERROR, {\n            message: message,\n            fatal: fatal\n        });\n    }\n}\n\n\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $6396333126da0e76$exports);\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $db6391dc7d757577$exports);\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $c1b4da4af54f4fa1$exports);\n$parcel$exportWildcard($fc3f408bb0b1f921$exports, $c0d10c4690969999$exports);\n\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nfunction $c68ef2498d1a7177$export$f1586721024c4dab(_target, propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n        if (this.state === \"ready\") return originalMethod.apply(this, args);\n        else throw new (0, $db6391dc7d757577$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ready state. Await connect() first.`);\n    };\n    return descriptor;\n}\nfunction $c68ef2498d1a7177$export$ebc0d747cf8770bc(_target, propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    const states = [\n        \"authenticating\",\n        \"connecting\",\n        \"connected\",\n        \"ready\"\n    ];\n    descriptor.value = function(...args) {\n        if (states.includes(this.state)) throw new (0, $db6391dc7d757577$export$cc240eab14fa4f50)(`Attempt to call ${propertyKey.toString()} when client already started. Please call disconnect() before starting again.`);\n        else return originalMethod.apply(this, args);\n    };\n    return descriptor;\n}\nfunction $c68ef2498d1a7177$export$808994d0d8c9acb3(states) {\n    return function(_target, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.get = function(...args) {\n            if (states.includes(this.state)) return originalMethod.apply(this, args);\n            else throw new (0, $db6391dc7d757577$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ${states}.`);\n        };\n        return descriptor;\n    };\n}\nfunction $c68ef2498d1a7177$export$5c35b4fe6fa8c9a6(...states) {\n    states = [\n        \"ready\",\n        ...states\n    ];\n    return function(_target, propertyKey, descriptor) {\n        const originalGetter = descriptor.get;\n        descriptor.get = function() {\n            if (states.includes(this.state)) return originalGetter?.apply(this);\n            else throw new (0, $db6391dc7d757577$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ${states}. Await connect() first.`);\n        };\n        return descriptor;\n    };\n}\n\n\nvar $769bb602511974a1$exports = {};\n\n$parcel$export($769bb602511974a1$exports, \"MessageDispatcher\", () => $769bb602511974a1$export$e9a960646cc432aa);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nvar $e0900798b6cc045b$exports = {};\n\n$parcel$export($e0900798b6cc045b$exports, \"LogLevel\", () => $e0900798b6cc045b$export$243e62d78d3b544d);\n$parcel$export($e0900798b6cc045b$exports, \"logger\", () => $e0900798b6cc045b$export$af88d00dbe7f521);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $e0900798b6cc045b$export$243e62d78d3b544d;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"NONE\"] = 0] = \"NONE\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 3] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 4] = \"DEBUG\";\n})($e0900798b6cc045b$export$243e62d78d3b544d || ($e0900798b6cc045b$export$243e62d78d3b544d = {}));\nclass $e0900798b6cc045b$var$Logger {\n    constructor(){\n        this.level = $e0900798b6cc045b$export$243e62d78d3b544d.DEBUG;\n    }\n    static getInstance() {\n        if (!$e0900798b6cc045b$var$Logger.instance) $e0900798b6cc045b$var$Logger.instance = new $e0900798b6cc045b$var$Logger();\n        return $e0900798b6cc045b$var$Logger.instance;\n    }\n    setLevel(level) {\n        this.level = level;\n    }\n    debug(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.DEBUG) console.debug(...args);\n    }\n    info(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.INFO) console.info(...args);\n    }\n    warn(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.WARN) console.warn(...args);\n    }\n    error(...args) {\n        if (this.level >= $e0900798b6cc045b$export$243e62d78d3b544d.ERROR) console.error(...args);\n    }\n}\nconst $e0900798b6cc045b$export$af88d00dbe7f521 = $e0900798b6cc045b$var$Logger.getInstance();\n\n\nclass $769bb602511974a1$export$e9a960646cc432aa {\n    constructor(sendMethod){\n        this._queue = new Array();\n        this._gcInterval = undefined;\n        this._queue = [];\n        this._sendMethod = sendMethod;\n    }\n    disconnect() {\n        this.clearQueue();\n        clearInterval(this._gcInterval);\n        this._gcInterval = undefined;\n    }\n    dispatch(message_data, type = (0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE, timeout = 10000) {\n        if (!this._gcInterval) // start garbage collection if not already running\n        this._gcInterval = setInterval(()=>{\n            this._gc();\n        }, 2000); // Run garbage collection every 2 seconds\n        const message = new (0, $c0d10c4690969999$export$69aa9ab0334b212)(type, message_data);\n        const promise = new Promise((resolve, reject)=>{\n            this._queue.push({\n                message: message,\n                timestamp: Date.now(),\n                timeout: timeout,\n                resolve: resolve,\n                reject: reject\n            });\n        });\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] dispatch\", message);\n        try {\n            this._sendMethod(message);\n        } catch (e) {\n            (0, $e0900798b6cc045b$export$af88d00dbe7f521).error(\"[MessageDispatcher] Error sending message\", e);\n            return Promise.reject(e);\n        }\n        this._gc();\n        return promise;\n    }\n    clearQueue() {\n        this._queue = [];\n    }\n    _resolveReject(message, resolve = true) {\n        const queuedMessage = this._queue.find((msg)=>msg.message.id === message.id);\n        if (queuedMessage) {\n            if (resolve) {\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Resolve\", message);\n                queuedMessage.resolve(message);\n            } else {\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Reject\", message);\n                queuedMessage.reject(message);\n            }\n            // Remove message from queue\n            this._queue = this._queue.filter((msg)=>msg.message.id !== message.id);\n            (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Queue\", this._queue);\n        }\n        return message;\n    }\n    resolve(message) {\n        return this._resolveReject(message, true);\n    }\n    reject(message) {\n        return this._resolveReject(message, false);\n    }\n    _gc() {\n        const expired = [];\n        this._queue = this._queue.filter((msg)=>{\n            const isValid = Date.now() - msg.timestamp < msg.timeout;\n            if (!isValid) expired.push(msg);\n            return isValid;\n        });\n        expired.forEach((msg)=>{\n            if (msg.message.type === (0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE) msg.reject(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).ERROR_RESPONSE, {\n                error: \"Timed out waiting for response\",\n                msgType: msg.message.data.t,\n                data: msg.message.data.d,\n                fatal: false\n            }));\n        });\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[MessageDispatcher] GC\", this._queue);\n    }\n}\n\n\n\nvar $d0e914667cc5346b$exports = {};\n\n$parcel$export($d0e914667cc5346b$exports, \"isAPIRequest\", () => $d0e914667cc5346b$export$2dd7ca293b2783);\n$parcel$export($d0e914667cc5346b$exports, \"makeRequest\", () => $d0e914667cc5346b$export$699251e5611cc6db);\n\nfunction $d0e914667cc5346b$export$2dd7ca293b2783(value) {\n    if (typeof value === \"object\" && value !== null && Object.keys(value).includes(\"endpoint\")) {\n        const endpoint = value[\"endpoint\"];\n        return typeof endpoint === \"string\" || endpoint instanceof URL || typeof Request !== \"undefined\" && endpoint instanceof Request;\n    }\n    return false;\n}\nasync function $d0e914667cc5346b$export$699251e5611cc6db(cxnOpts, abortController) {\n    if (!abortController) abortController = new AbortController();\n    let handshakeTimeout;\n    return new Promise((resolve, reject)=>{\n        (async ()=>{\n            if (cxnOpts.timeout) handshakeTimeout = setTimeout(async ()=>{\n                abortController.abort();\n                reject(new Error(\"Timed out\"));\n            }, cxnOpts.timeout);\n            (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(`[Pipecat Client] Fetching from ${cxnOpts.endpoint}`);\n            fetch(cxnOpts.endpoint, {\n                method: \"POST\",\n                mode: \"cors\",\n                headers: new Headers({\n                    \"Content-Type\": \"application/json\",\n                    ...Object.fromEntries((cxnOpts.headers ?? new Headers()).entries())\n                }),\n                body: JSON.stringify(cxnOpts.requestData),\n                signal: abortController?.signal\n            }).then((res)=>{\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(`[Pipecat Client] Received response from ${cxnOpts.endpoint}`, res);\n                if (!res.ok) reject(res);\n                res.json().then((data)=>resolve(data));\n            }).catch((err)=>{\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).error(`[Pipecat Client] Error fetching: ${err}`);\n                reject(err);\n            }).finally(()=>{\n                if (handshakeTimeout) clearTimeout(handshakeTimeout);\n            });\n        })();\n    });\n}\n\n\nvar $7ef5cee66c377f4d$exports = {};\n\n$parcel$export($7ef5cee66c377f4d$exports, \"Transport\", () => $7ef5cee66c377f4d$export$86495b081fef8e52);\n$parcel$export($7ef5cee66c377f4d$exports, \"TransportWrapper\", () => $7ef5cee66c377f4d$export$82b6ede160a64a3c);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nclass $7ef5cee66c377f4d$export$86495b081fef8e52 {\n    constructor(){\n        this._state = \"disconnected\";\n    }\n    /**\n     * Establishes a connection with the remote server. This is the main entry\n     * point for the transport to start sending and receiving media and messages.\n     * This is called from PipecatClient.connect() and should not be called directly.\n     * @param connectParams - This type will ultimately be defned by the transport\n     * implementation. It is used to pass connection parameters to the transport.\n     */ connect(connectParams) {\n        this._abortController = new AbortController();\n        let validatedParams = connectParams;\n        try {\n            validatedParams = this._validateConnectionParams(connectParams);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (e) {\n            throw new (0, $db6391dc7d757577$export$59b4786f333aac02)(`Invalid connection params: ${e.message}. Please check your connection params and try again.`);\n        }\n        return this._connect(validatedParams);\n    }\n    /**\n     * Allow the transports to determine how the bot was started.\n     */ get startBotParams() {\n        return this._startBotParams;\n    }\n    /**\n     * Set the parameters used to start the bot.\n     * @param startBotParams\n     */ set startBotParams(startBotParams) {\n        this._startBotParams = startBotParams;\n    }\n    /**\n     * Disconnects the transport from the remote server. This is called from\n     * PipecatClient.disconnect() and should not be called directly.\n     */ disconnect() {\n        if (this._abortController) this._abortController.abort();\n        return this._disconnect();\n    }\n}\nclass $7ef5cee66c377f4d$export$82b6ede160a64a3c {\n    constructor(transport){\n        this._transport = transport;\n        this._proxy = new Proxy(this._transport, {\n            get: (target, prop, receiver)=>{\n                if (typeof target[prop] === \"function\") {\n                    let errMsg;\n                    switch(String(prop)){\n                        // Disable methods that modify the lifecycle of the call. These operations\n                        // should be performed via the Pipecat client in order to keep state in sync.\n                        case \"initialize\":\n                            errMsg = `Direct calls to initialize() are disabled and used internally by the PipecatClient.`;\n                            break;\n                        case \"initDevices\":\n                            errMsg = `Direct calls to initDevices() are disabled. Please use the PipecatClient.initDevices() wrapper or let PipecatClient.connect() call it for you.`;\n                            break;\n                        case \"sendReadyMessage\":\n                            errMsg = `Direct calls to sendReadyMessage() are disabled and used internally by the PipecatClient.`;\n                            break;\n                        case \"connect\":\n                            errMsg = `Direct calls to connect() are disabled. Please use the PipecatClient.connect() wrapper.`;\n                            break;\n                        case \"disconnect\":\n                            errMsg = `Direct calls to disconnect() are disabled. Please use the PipecatClient.disconnect() wrapper.`;\n                            break;\n                    }\n                    if (errMsg) return ()=>{\n                        throw new Error(errMsg);\n                    };\n                    // Forward other method calls\n                    return (...args)=>{\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n                        return target[prop](...args);\n                    };\n                }\n                // Forward property access\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n    get proxy() {\n        return this._proxy;\n    }\n}\n\n\nvar $dfd757760e36925b$exports = {};\n\n$parcel$export($dfd757760e36925b$exports, \"learnAboutClient\", () => $dfd757760e36925b$export$7eb7b0a641098f31);\n\n\nfunction $dfd757760e36925b$export$7eb7b0a641098f31() {\n    let about = {\n        library: (0, $e3bad9cc25e327f7$exports.name),\n        library_version: (0, $e3bad9cc25e327f7$exports.version),\n        platform_details: {}\n    };\n    // This uses legacy browser user agent parsing, which we still fall\n    // back to if the User Agent Hints API is not available\n    let navAgentInfo = null;\n    if (window?.navigator?.userAgent) try {\n        navAgentInfo = (0, bowser__WEBPACK_IMPORTED_MODULE_1__[\"default\"]).parse(window.navigator.userAgent);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n    // void\n    }\n    if (navAgentInfo?.browser?.name) about.platform_details.browser = navAgentInfo.browser.name;\n    if (navAgentInfo?.browser?.name === \"Safari\" && !navAgentInfo.browser.version) about.platform_details.browser_version = \"Web View\";\n    else if (navAgentInfo?.browser?.version) about.platform_details.browser_version = navAgentInfo.browser.version;\n    if (navAgentInfo?.platform?.type) about.platform_details.platform_type = navAgentInfo.platform.type;\n    if (navAgentInfo?.engine?.name) about.platform_details.engine = navAgentInfo.engine.name;\n    if (navAgentInfo?.os) {\n        about.platform = navAgentInfo.os.name;\n        about.platform_version = navAgentInfo.os.version;\n    }\n    return about;\n}\n\n\nvar $364c127d152b1085$var$__decorate =  false || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass $364c127d152b1085$var$RTVIEventEmitter extends (0, (events__WEBPACK_IMPORTED_MODULE_0___default())) {\n}\nclass $364c127d152b1085$export$8f7f86a77535f7a3 extends $364c127d152b1085$var$RTVIEventEmitter {\n    constructor(options){\n        super();\n        this._functionCallCallbacks = {};\n        (0, $c0d10c4690969999$export$e4036f9b8ddb7379)((0, $dfd757760e36925b$export$7eb7b0a641098f31)());\n        this._transport = options.transport;\n        this._transportWrapper = new (0, $7ef5cee66c377f4d$export$82b6ede160a64a3c)(this._transport);\n        // Wrap transport callbacks with event triggers\n        // This allows for either functional callbacks or .on / .off event listeners\n        const wrappedCallbacks = {\n            ...options.callbacks,\n            onMessageError: (message)=>{\n                options?.callbacks?.onMessageError?.(message);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).MessageError, message);\n            },\n            onError: (message)=>{\n                options?.callbacks?.onError?.(message);\n                try {\n                    this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Error, message);\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                } catch (e) {\n                    (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"Could not emit error\", message);\n                }\n                const data = message.data;\n                if (data?.fatal) {\n                    (0, $e0900798b6cc045b$export$af88d00dbe7f521).error(\"Fatal error reported. Disconnecting...\");\n                    this.disconnect();\n                }\n            },\n            onConnected: ()=>{\n                options?.callbacks?.onConnected?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Connected);\n            },\n            onDisconnected: ()=>{\n                options?.callbacks?.onDisconnected?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Disconnected);\n            },\n            onTransportStateChanged: (state)=>{\n                options?.callbacks?.onTransportStateChanged?.(state);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).TransportStateChanged, state);\n            },\n            onParticipantJoined: (p)=>{\n                options?.callbacks?.onParticipantJoined?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ParticipantConnected, p);\n            },\n            onParticipantLeft: (p)=>{\n                options?.callbacks?.onParticipantLeft?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ParticipantLeft, p);\n            },\n            onTrackStarted: (track, p)=>{\n                options?.callbacks?.onTrackStarted?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).TrackStarted, track, p);\n            },\n            onTrackStopped: (track, p)=>{\n                options?.callbacks?.onTrackStopped?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).TrackStopped, track, p);\n            },\n            onScreenTrackStarted: (track, p)=>{\n                options?.callbacks?.onScreenTrackStarted?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ScreenTrackStarted, track, p);\n            },\n            onScreenTrackStopped: (track, p)=>{\n                options?.callbacks?.onScreenTrackStopped?.(track, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ScreenTrackStopped, track, p);\n            },\n            onScreenShareError: (errorMessage)=>{\n                options?.callbacks?.onScreenShareError?.(errorMessage);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ScreenShareError, errorMessage);\n            },\n            onAvailableCamsUpdated: (cams)=>{\n                options?.callbacks?.onAvailableCamsUpdated?.(cams);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).AvailableCamsUpdated, cams);\n            },\n            onAvailableMicsUpdated: (mics)=>{\n                options?.callbacks?.onAvailableMicsUpdated?.(mics);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).AvailableMicsUpdated, mics);\n            },\n            onAvailableSpeakersUpdated: (speakers)=>{\n                options?.callbacks?.onAvailableSpeakersUpdated?.(speakers);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).AvailableSpeakersUpdated, speakers);\n            },\n            onCamUpdated: (cam)=>{\n                options?.callbacks?.onCamUpdated?.(cam);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).CamUpdated, cam);\n            },\n            onMicUpdated: (mic)=>{\n                options?.callbacks?.onMicUpdated?.(mic);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).MicUpdated, mic);\n            },\n            onSpeakerUpdated: (speaker)=>{\n                options?.callbacks?.onSpeakerUpdated?.(speaker);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).SpeakerUpdated, speaker);\n            },\n            onDeviceError: (error)=>{\n                options?.callbacks?.onDeviceError?.(error);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).DeviceError, error);\n            },\n            onBotStarted: (botResponse)=>{\n                options?.callbacks?.onBotStarted?.(botResponse);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotStarted, botResponse);\n            },\n            onBotConnected: (p)=>{\n                options?.callbacks?.onBotConnected?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotConnected, p);\n            },\n            onBotReady: (botReadyData)=>{\n                options?.callbacks?.onBotReady?.(botReadyData);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotReady, botReadyData);\n            },\n            onBotDisconnected: (p)=>{\n                options?.callbacks?.onBotDisconnected?.(p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotDisconnected, p);\n            },\n            onBotStartedSpeaking: ()=>{\n                options?.callbacks?.onBotStartedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotStartedSpeaking);\n            },\n            onBotStoppedSpeaking: ()=>{\n                options?.callbacks?.onBotStoppedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotStoppedSpeaking);\n            },\n            onRemoteAudioLevel: (level, p)=>{\n                options?.callbacks?.onRemoteAudioLevel?.(level, p);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).RemoteAudioLevel, level, p);\n            },\n            onUserStartedSpeaking: ()=>{\n                options?.callbacks?.onUserStartedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).UserStartedSpeaking);\n            },\n            onUserStoppedSpeaking: ()=>{\n                options?.callbacks?.onUserStoppedSpeaking?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).UserStoppedSpeaking);\n            },\n            onLocalAudioLevel: (level)=>{\n                options?.callbacks?.onLocalAudioLevel?.(level);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).LocalAudioLevel, level);\n            },\n            onUserTranscript: (data)=>{\n                options?.callbacks?.onUserTranscript?.(data);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).UserTranscript, data);\n            },\n            onBotTranscript: (text)=>{\n                options?.callbacks?.onBotTranscript?.(text);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTranscript, text);\n            },\n            onBotLlmText: (text)=>{\n                options?.callbacks?.onBotLlmText?.(text);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmText, text);\n            },\n            onBotLlmStarted: ()=>{\n                options?.callbacks?.onBotLlmStarted?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmStarted);\n            },\n            onBotLlmStopped: ()=>{\n                options?.callbacks?.onBotLlmStopped?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmStopped);\n            },\n            onBotTtsText: (text)=>{\n                options?.callbacks?.onBotTtsText?.(text);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTtsText, text);\n            },\n            onBotTtsStarted: ()=>{\n                options?.callbacks?.onBotTtsStarted?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTtsStarted);\n            },\n            onBotTtsStopped: ()=>{\n                options?.callbacks?.onBotTtsStopped?.();\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotTtsStopped);\n            }\n        };\n        // Update options to reference wrapped callbacks and config defaults\n        this._options = {\n            ...options,\n            callbacks: wrappedCallbacks,\n            enableMic: options.enableMic ?? true,\n            enableCam: options.enableCam ?? false,\n            enableScreenShare: options.enableScreenShare ?? false\n        };\n        // Instantiate the transport class and bind message handler\n        this._initialize();\n        // Get package version number\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[Pipecat Client] Initialized\", this.version);\n    }\n    setLogLevel(level) {\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).setLevel(level);\n    }\n    // ------ Transport methods\n    /**\n     * Initialize local media devices\n     */ async initDevices() {\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[Pipecat Client] Initializing devices...\");\n        await this._transport.initDevices();\n    }\n    /**\n     * startBot() is a method that initiates the bot by posting to a specified endpoint\n     * that optionally returns connection parameters for establishing a transport session.\n     * @param startBotParams\n     * @returns Promise that resolves to TransportConnectionParams or unknown\n     */ async startBot(startBotParams) {\n        this._transport.state = \"authenticating\";\n        this._transport.startBotParams = startBotParams;\n        this._abortController = new AbortController();\n        let response;\n        try {\n            response = await (0, $d0e914667cc5346b$export$699251e5611cc6db)(startBotParams, this._abortController);\n        } catch (e) {\n            let errMsg = \"An unknown error occurred while starting the bot.\";\n            let status;\n            if (e instanceof Response) {\n                const errResp = await e.json();\n                errMsg = errResp.info ?? errResp.detail ?? e.statusText;\n                status = e.status;\n            } else if (e instanceof Error) errMsg = e.message;\n            this._options.callbacks?.onError?.(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).ERROR_RESPONSE, {\n                message: errMsg,\n                fatal: true\n            }));\n            throw new $db6391dc7d757577$export$e7544ab812238a61(errMsg, status);\n        }\n        this._transport.state = \"authenticated\";\n        this._options.callbacks?.onBotStarted?.(response);\n        return response;\n    }\n    /**\n     * The `connect` function establishes a transport session and awaits a\n     * bot-ready signal, handling various connection states and errors.\n     * @param {TransportConnectionParams} [connectParams] -\n     * The `connectParams` parameter in the `connect` method should be of type\n     * `TransportConnectionParams`. This parameter is passed to the transport\n     * for establishing a transport session.\n     * NOTE: `connectParams` as type `ConnectionEndpoint` IS NOW DEPRECATED. If you\n     * want to authenticate and connect to a bot in one step, use\n     * `startBotAndConnect()` instead.\n     * @returns The `connect` method returns a Promise that resolves to an unknown value.\n     */ async connect(connectParams) {\n        if (connectParams && (0, $d0e914667cc5346b$export$2dd7ca293b2783)(connectParams)) {\n            (0, $e0900798b6cc045b$export$af88d00dbe7f521).warn(\"Calling connect with an API endpoint is deprecated. Use startBotAndConnect() instead.\");\n            return this.startBotAndConnect(connectParams);\n        }\n        // Establish transport session and await bot ready signal\n        return new Promise((resolve, reject)=>{\n            (async ()=>{\n                this._connectResolve = resolve;\n                if (this._transport.state === \"disconnected\") await this._transport.initDevices();\n                try {\n                    await this._transport.connect(connectParams);\n                    await this._transport.sendReadyMessage();\n                } catch (e) {\n                    this.disconnect();\n                    reject(e);\n                    return;\n                }\n            })();\n        });\n    }\n    async startBotAndConnect(startBotParams) {\n        // since startBot() will change the transport state, we need\n        // to do device initialization here.\n        if (this._transport.state === \"disconnected\") await this._transport.initDevices();\n        const connectionParams = await this.startBot(startBotParams);\n        return this.connect(connectionParams);\n    }\n    /**\n     * Disconnect the voice client from the transport\n     * Reset / reinitialize transport and abort any pending requests\n     */ async disconnect() {\n        await this._transport.disconnect();\n        this._messageDispatcher.disconnect();\n    }\n    /**\n     * The _initialize function performs internal set up of the transport and\n     * message dispatcher.\n     */ _initialize() {\n        this._transport.initialize(this._options, this.handleMessage.bind(this));\n        // Create a new message dispatch queue for async message handling\n        this._messageDispatcher = new (0, $769bb602511974a1$export$e9a960646cc432aa)(this._transport.sendMessage.bind(this._transport));\n    }\n    /**\n     * Get the current state of the transport\n     */ get connected() {\n        return [\n            \"connected\",\n            \"ready\"\n        ].includes(this._transport.state);\n    }\n    get transport() {\n        return this._transportWrapper.proxy;\n    }\n    get state() {\n        return this._transport.state;\n    }\n    get version() {\n        return (0, (/*@__PURE__*/$parcel$interopDefault($e3bad9cc25e327f7$exports))).version;\n    }\n    // ------ Device methods\n    async getAllMics() {\n        return await this._transport.getAllMics();\n    }\n    async getAllCams() {\n        return await this._transport.getAllCams();\n    }\n    async getAllSpeakers() {\n        return await this._transport.getAllSpeakers();\n    }\n    get selectedMic() {\n        return this._transport.selectedMic;\n    }\n    get selectedCam() {\n        return this._transport.selectedCam;\n    }\n    get selectedSpeaker() {\n        return this._transport.selectedSpeaker;\n    }\n    updateMic(micId) {\n        this._transport.updateMic(micId);\n    }\n    updateCam(camId) {\n        this._transport.updateCam(camId);\n    }\n    updateSpeaker(speakerId) {\n        this._transport.updateSpeaker(speakerId);\n    }\n    enableMic(enable) {\n        this._transport.enableMic(enable);\n    }\n    get isMicEnabled() {\n        return this._transport.isMicEnabled;\n    }\n    enableCam(enable) {\n        this._transport.enableCam(enable);\n    }\n    get isCamEnabled() {\n        return this._transport.isCamEnabled;\n    }\n    tracks() {\n        return this._transport.tracks();\n    }\n    enableScreenShare(enable) {\n        return this._transport.enableScreenShare(enable);\n    }\n    get isSharingScreen() {\n        return this._transport.isSharingScreen;\n    }\n    // ------ Messages\n    /**\n     * Directly send a message to the bot via the transport.\n     * Do not await a response.\n     * @param msgType - a string representing the message type\n     * @param data - a dictionary of data to send with the message\n     */ sendClientMessage(msgType, data) {\n        this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE, {\n            t: msgType,\n            d: data\n        }));\n    }\n    /**\n     * Directly send a message to the bot via the transport.\n     * Wait for and return the response.\n     * @param msgType - a string representing the message type\n     * @param data - a dictionary of data to send with the message\n     * @param timeout - optional timeout in milliseconds for the response\n     */ async sendClientRequest(msgType, data, timeout) {\n        const msgData = {\n            t: msgType,\n            d: data\n        };\n        const response = await this._messageDispatcher.dispatch(msgData, (0, $c0d10c4690969999$export$38b3db05cbf0e240).CLIENT_MESSAGE, timeout);\n        const ret_data = response.data;\n        return ret_data.d;\n    }\n    registerFunctionCallHandler(functionName, callback) {\n        this._functionCallCallbacks[functionName] = callback;\n    }\n    unregisterFunctionCallHandler(functionName) {\n        delete this._functionCallCallbacks[functionName];\n    }\n    unregisterAllFunctionCallHandlers() {\n        this._functionCallCallbacks = {};\n    }\n    async appendToContext(context) {\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).warn(\"appendToContext() is deprecated. Use sendText() instead.\");\n        await this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).APPEND_TO_CONTEXT, {\n            role: context.role,\n            content: context.content,\n            run_immediately: context.run_immediately\n        }));\n        return true;\n    }\n    async sendText(content, options = {}) {\n        await this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).SEND_TEXT, {\n            content: content,\n            options: options\n        }));\n    }\n    /**\n     * Disconnects the bot, but keeps the session alive\n     */ disconnectBot() {\n        this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).DISCONNECT_BOT, {}));\n    }\n    handleMessage(ev) {\n        (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[RTVI Message]\", ev);\n        switch(ev.type){\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_READY:\n                {\n                    const data = ev.data;\n                    const botVersion = data.version ? data.version.split(\".\").map(Number) : [\n                        0,\n                        0,\n                        0\n                    ];\n                    (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(`[Pipecat Client] Bot is ready. Version: ${data.version}`);\n                    if (botVersion[0] < 1) (0, $e0900798b6cc045b$export$af88d00dbe7f521).warn(\"[Pipecat Client] Bot version is less than 1.0.0, which may not be compatible with this client.\");\n                    this._connectResolve?.(ev.data);\n                    this._options.callbacks?.onBotReady?.(ev.data);\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).ERROR:\n                this._options.callbacks?.onError?.(ev);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).SERVER_RESPONSE:\n                this._messageDispatcher.resolve(ev);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).ERROR_RESPONSE:\n                {\n                    const resp = this._messageDispatcher.reject(ev);\n                    this._options.callbacks?.onMessageError?.(resp);\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).USER_STARTED_SPEAKING:\n                this._options.callbacks?.onUserStartedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).USER_STOPPED_SPEAKING:\n                this._options.callbacks?.onUserStoppedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_STARTED_SPEAKING:\n                this._options.callbacks?.onBotStartedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_STOPPED_SPEAKING:\n                this._options.callbacks?.onBotStoppedSpeaking?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).USER_TRANSCRIPTION:\n                {\n                    const TranscriptData = ev.data;\n                    this._options.callbacks?.onUserTranscript?.(TranscriptData);\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TRANSCRIPTION:\n                this._options.callbacks?.onBotTranscript?.(ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_TEXT:\n                this._options.callbacks?.onBotLlmText?.(ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_STARTED:\n                this._options.callbacks?.onBotLlmStarted?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_STOPPED:\n                this._options.callbacks?.onBotLlmStopped?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TTS_TEXT:\n                this._options.callbacks?.onBotTtsText?.(ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TTS_STARTED:\n                this._options.callbacks?.onBotTtsStarted?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_TTS_STOPPED:\n                this._options.callbacks?.onBotTtsStopped?.();\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).METRICS:\n                this._options.callbacks?.onMetrics?.(ev.data);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).Metrics, ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).SERVER_MESSAGE:\n                this._options.callbacks?.onServerMessage?.(ev.data);\n                this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).ServerMessage, ev.data);\n                break;\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).LLM_FUNCTION_CALL:\n                {\n                    const data = ev.data;\n                    // First check if there's a registered function call handler\n                    // and trigger it if so.\n                    const fc = this._functionCallCallbacks[data.function_name];\n                    if (fc) {\n                        const params = {\n                            functionName: data.function_name,\n                            arguments: data.args\n                        };\n                        /*\n                     * registered function call handlers have the ability to\n                     * asynchronously return a result that is sent back to the server\n                     * as an automatically crafted LLM_FUNCTION_CALL_RESULT message.\n                     * Note: If the callback returns null or undefined, no result message\n                     * is sent.\n                     */ fc(params).then((result)=>{\n                            // == intentional to check for null or undefined\n                            if (result == undefined) return;\n                            this._transport.sendMessage(new (0, $c0d10c4690969999$export$69aa9ab0334b212)((0, $c0d10c4690969999$export$38b3db05cbf0e240).LLM_FUNCTION_CALL_RESULT, {\n                                function_name: data.function_name,\n                                tool_call_id: data.tool_call_id,\n                                arguments: data.args,\n                                result: result\n                            }));\n                        });\n                    }\n                    /*\n                 * Now emit the event for any generic LLMFunctionCall listeners/callbacks\n                 * Note: When using these, the onus is on the client to generate and\n                 *       send the LLM_FUNCTION_CALL_RESULT message if needed.\n                 */ this._options.callbacks?.onLLMFunctionCall?.(data);\n                    this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).LLMFunctionCall, data);\n                    break;\n                }\n            case (0, $c0d10c4690969999$export$38b3db05cbf0e240).BOT_LLM_SEARCH_RESPONSE:\n                {\n                    const data = ev.data;\n                    this._options.callbacks?.onBotLlmSearchResponse?.(data);\n                    this.emit((0, $c1b4da4af54f4fa1$export$6b4624d233c61fcb).BotLlmSearchResponse, data);\n                    break;\n                }\n            default:\n                (0, $e0900798b6cc045b$export$af88d00dbe7f521).debug(\"[Pipecat Client] Unrecognized message type\", ev.type);\n                break;\n        }\n    }\n}\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$ebc0d747cf8770bc)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"startBot\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$ebc0d747cf8770bc)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"connect\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$ebc0d747cf8770bc)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"startBotAndConnect\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"sendClientMessage\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"sendClientRequest\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"appendToContext\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"sendText\", null);\n$364c127d152b1085$var$__decorate([\n    (0, $c68ef2498d1a7177$export$f1586721024c4dab)\n], $364c127d152b1085$export$8f7f86a77535f7a3.prototype, \"disconnectBot\", null);\n\n\n\n\n\n\n\n$parcel$exportWildcard($05fa7b586184a19c$exports, $364c127d152b1085$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $769bb602511974a1$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $e0900798b6cc045b$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $d0e914667cc5346b$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $7ef5cee66c377f4d$exports);\n$parcel$exportWildcard($05fa7b586184a19c$exports, $dfd757760e36925b$exports);\n\n\n\n\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@pipecat-ai+client-js@1.4.1/node_modules/@pipecat-ai/client-js/dist/index.module.js\n");

/***/ })

};
;